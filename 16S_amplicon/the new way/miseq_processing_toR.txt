otu table R:
open file with excel
make columns wide and create 6 empty columns after sample name 
data -> text in columns -> separated via tabstop
name path columns
clean up table: 
remove non-bacteria, sort for "kingdom", remove "no relative"
adjust sample name: extra column, =Teil(cell;startcharacter;numberofcharacters) --> =Teil(A3;6;7)
save as csv

open R
set working folder
load workspace
download packages: vegan, ggplot2, DESeq2, reshape

start_otu<-read.csv(file.choose(),sep=";",header=TRUE)													#read in csv-table to R
start_otu																								#display the object "start_otu"
head(start_otu,6)																						#show the top 6 lines (compare "tail")
names(start_otu)																						#show the different columns ("headers")
str(start_otu)																							#show the structure of "start_otu"
levels(start_otu$sample_name)																			#show the different values of the column "sample_name" in the object "start_otu"
													
start_otu$wholetax<-do.call(paste, c(start_otu[c("genus","family","order","class","phylum")],sep="_")) 	#merge taxonomic classes to one name in a column called "wholetax"
(agg_start_otu<-aggregate(total_seq~sample_name+wholetax, data = start_otu, sum)) 						#possible step to combine parallels as mean or sum, all columns except the to-be-combined must be named

library(reshape) 																						#load package reshape for cast (not reshape2!)

start_otu<-start_otu[,c(2,9,1)]																			#select columns and reorder

cast_start_otu<-cast(start_otu,sample_name~wholetax)
cast_start_otu[is.na(cast_start_otu)]<-0 																#replace NA with 0
names(cast_start_otu)
nrow(cast_start_otu)																					#number of rows
ncol(cast_start_otu)																					#number of columns
rowSums(cast_start_otu) 																				#shows reads per sample
row.names(cast_start_otu)<-cast_start_otu$sample_name													#turns "sample_name" into row names
cast_start_otu<-cast_start_otu[,-1]																		#remove "samples_names"
names(cast_start_otu)
write.csv(cast_start_otu,file="cast_start_otu.csv")
tcast_start_otu<-read.csv(file.choose(),sep=";",header=T)												#transponating in excel
head(tcast_start_otu)
str(tcast_start_otu)
row.names(tcast_start_otu)<-tcast_start_otu$X
tcast_start_otu<-tcast_start_otu[,-1]																	#not removing 0 or 1 read counts because it can effect alpha diversity estimates

#create meta_data file in excel
#read in meta_data
#integer to factor
meta_data<-read.csv(file.choose(),header=T,row.names=1,sep=";") 										#samples in rows, meta data in colums
str(meta_data) 
meta_data$time<-as.factor(meta_data$time)
meta_data$days<-as.factor(meta_data$days)
meta_data$parallel<-as.factor(meta_data$parallel)
str(meta_data)

library(DESeq2)
library(ggplot2)

#giving data to deseq: wichtige variable am ende bei "~x + y" design
dds_start <- DESeqDataSetFromMatrix(countData = tcast_start_otu,colData = meta_data,design = ~time)
#running a LRT likelihood ratio test for testing several factors at once, reduced: reducing the degrees of freedom by 1, local dispersion fit
dds_start<-DESeq(dds_start,test="LRT",reduced= ~ 1, fitType='local') 

sizeFactors(dds_start)
write.csv(sizeFactors(dds_start),file="factor_start.csv")
counts_start<-counts(dds_start, normalized=T)
counts_start
write.csv(counts_start,file="norm_start.csv")															#use normalized read counts for absolute comparisons


#merge with meta data
counttable_with_meta<-merge(counttable_without_meta,meta_file,by="row.names",all.x=TRUE)	
		
#zwei tabellen, die eine gemeinsame spalte aufweisen (hier: row.names), werden zusammengesetzt. soviele zeilen, wie in x (der erstgenannten tabelle enthalten sind, kommen in die finale datei)
#split wholetax into taxonomic levels again (in excel) 
#melt into final table with all samples, all taxonomic levels and all metadata combinations
final_table<-melt(counttable_with_meta, id=c("criteria1","criteria2","criteria3","criteria4","criteria5","criteria6"))

#extract phylogeny/sample/habitat of interest
sample_subset<-subset(final_table,final_table$criteria1=="water"&final_table$criteria1=="dna")

#remove 0/1 in excel

#set threshold?

##plot ideas

#specific otu
otuname_plot<-subset(melted_tax_test,otuspalte == "otuname")
gg_otu_name_plot<-ggplot(otu_name_plot)
gg_otu_name_plot+
	geom_point(aes(x=inputxachse,y=hier_die_counts_spalte,colour=die spalte, nach der die farbliche auftrennung passieren soll, z.B. otus oder material))+
	facet_wrap(~day*treatment,nrow=2,ncol=4)+
	ggtitle("otu_name")+
	(aes(x=criteria1,y=value, colour=criteria2))
	
##hier etwas ausgefeilter: ich will nur einen organismus darstellen, in einem punkt diagramm (geom_point). auf der x achse könnte ich zB die parallelen darstellen, auf der y-achse natürlich die read counts
#mit ggtitle gebe ich dem plot einen namen
#facet_wrap ermöglicht mir viele verschiedene plots gleichzeitig, die sich in den faktoren "day" und "treatment" unterschieden. diese vielen plots möchte ich in zwei reihen und 4 spalten dargestellt haben (wenn das ausreicht)
#die "aes"-eingabe ist ziemlich kompliziert, siehe ggplot2-manual, ich glaube, hier geht es um die legende

#gemeinschaftsplot

test<-ggplot(final_table_subset, aes(x = "", y = value, fill=variable))+		
	facet_wrap( ~criteria1*criteria2,nrow=?,ncol=?)+				
	geom_bar(width = 1, stat = "identity")
#ohne legende: +theme(legend.position='none')	

#um aus säulendiagramm ein tortendiagramm zu machen:
torten_test<-test + coord_polar("y", start=0)


#gemeinschaftsplot mit mindestreadsanzahl 
test_groesser_50<-ggplot(final_table_subset[which(final_table_subset$value>50),], aes(x = "", y = value, fill=variable))+
	facet_wrap( ~criteria1*criteria2,nrow=2,ncol=16)+				
	geom_bar(width = 1, stat = "identity")

##diversity indices mit 
library(vegan) 


## for Shannon Index (H) you need Species richness (S) and Pielou's evenness (J):
S <- specnumber(table) 					## rowSums(table > 0) does the same...
J <- H/log(S)

##otus in spalten/proben als rownames 
head(final_table_subset)
h_final_table_subset<-diversity(final_table_subset)
s_final_table_subset<-specnumber(final_table_subset)
j_final_table_subset<-h_final_table_subset/log(final_table_subset)
write.csv(h_final_table_subset,file="h_final_table_subset.csv")
write.csv(s_final_table_subset,file="s_final_table_subset.csv")
write.csv(j_final_table_subset,file="j_final_table_subset.csv")
#manuelles kombinieren der werte in excel